import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.*;
import java.util.stream.Collectors;

public class WordReducer {
    private static final String WORDS_URL = "https://raw.githubusercontent.com/nikiiv/JavaCodingTestOne/master/scrabble-words.txt";
    private static final Set<String> wordSet = new HashSet<>();

    public static void main(String[] args) throws IOException {
        long startTime = System.nanoTime();
        loadAllWords();
        List<String> validWords = findReducibleWords();
        long endTime = System.nanoTime();

        // –†–µ–∑—É–ª—Ç–∞—Ç–∏
        validWords.forEach(System.out::println);
        System.out.println("Found " + validWords.size() + " reducible 9-letters words.");
        System.out.println("Execution time: " + (endTime - startTime) / 1000000 + " ms");

    }

    /**
     * üöÄ –ó–∞—Ä–µ–∂–¥–∞ –¥—É–º–∏—Ç–µ –∏ –≥–∏ —Å—ä—Ö—Ä–∞–Ω—è–≤–∞ –≤ HashSet
     */
    private static void loadAllWords() throws IOException {
        URL url = new URL(WORDS_URL);
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))) {
            wordSet.addAll(reader.lines().map(String::trim).map(String::toLowerCase).collect(Collectors.toSet()));
        }
    }

    /**
     * üîç –ù–∞–º–∏—Ä–∞ –≤—Å–∏—á–∫–∏ 9-–±—É–∫–≤–µ–Ω–∏ –¥—É–º–∏, –∫–æ–∏—Ç–æ –º–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç —Ä–µ–¥—É—Ü–∏—Ä–∞–Ω–∏
     */
    private static List<String> findReducibleWords() {
        List<String> result = new ArrayList<>();
        for (String word : wordSet) {
            if (word.length() == 9 && isReducible(word)) {
                result.add(word);
            }
        }
        return result;
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω–∞ –¥—É–º–∞ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ —Å–≤–µ–¥–µ–Ω–∞ –¥–æ "i" –∏–ª–∏ "a"
     */
    private static boolean isReducible(String word) {

        // –ê–∫–æ –¥—É–º–∞—Ç–∞ –µ —Å–∞–º–æ –µ–¥–Ω–∞ –±—É–∫–≤–∞, —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –≤–∞–ª–∏–¥–Ω–∞ (I –∏–ª–∏ A)
        if (word.length() == 1) {
            return word.equals("i") || word.equals("a");
        }

        // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å—è–∫–∞ –±—É–∫–≤–∞ –æ—Ç –¥—É–º–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –æ—Å—Ç–∞–≤–∞ –≤–∞–ª–∏–¥–Ω–∞ –¥—É–º–∞
        boolean validReductionFound = false;
        for (int i = 0; i < word.length(); i++) {
            String reducedWord = word.substring(0, i) + word.substring(i + 1);
            if (wordSet.contains(reducedWord) || reducedWord.equals("i") || reducedWord.equals("a")) {
                // –ê–∫–æ —Ä–µ–¥—É—Ü–∏—Ä–∞–Ω–∞—Ç–∞ –¥—É–º–∞ –µ –≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞ —Å—Ç—ä–ø–∫–∞
                if (isReducible(reducedWord)) {
                    validReductionFound = true;
                    break;  // –ù–∞–º–µ—Ä–µ–Ω–∞ –µ –≤–∞–ª–∏–¥–Ω–∞ —Ä–µ–¥—É–∫—Ü–∏—è, –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ —Å –¥—Ä—É–≥–∞ –±—É–∫–≤–∞
                }
            }
        }

        return validReductionFound;  // –ê–∫–æ –Ω–∞–º–µ—Ä–∏–º –ø–æ–Ω–µ –µ–¥–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞ —Ä–µ–¥—É–∫—Ü–∏—è
    }
}
